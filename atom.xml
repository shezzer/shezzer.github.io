<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Be Better</title>
  
  <subtitle>myBlog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.shezzer.cn/"/>
  <updated>2018-09-14T03:36:10.000Z</updated>
  <id>www.shezzer.cn/</id>
  
  <author>
    <name>Shezzer He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql分布式事务</title>
    <link href="www.shezzer.cn/2018/09/13/mysql%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>www.shezzer.cn/2018/09/13/mysql分布式事务/</id>
    <published>2018-09-13T13:45:19.000Z</published>
    <updated>2018-09-14T03:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql的XA事务分为外部XA和内部XA<br>   外部XA用于跨多MySQL实例的分布式事务，外部XA事务是通常定义的分布式事务。MySQL数据库本身提供XA事务支持，例如常见的InnoDB存储引擎。因此，用户可以通过JTA实现分布式事务应用。在MySQL XA事务中，应用程序是协调者（coordinator），参数事务的服务器节点就是资源管理器（resource manager）  应用层负责决定提交还是回滚，崩溃时的悬挂事务。MySQL数据库外部XA可以用在分布式数据库代理层，实现对MySQL数据库的分布式事务支持，例如开源的代理工具:网易的DDB，淘宝的TDDL等等。<br>   内部XA事务用于同一实例下跨多引擎事务，由Binlog作为协调者，比如在一个存储引擎提交时，需要将提交信息写入二进制日志，这就是一个分布式内部XA事务，只不过二进制日志的参与者是MySQL本身。Binlog作为内部XA的协调者，在binlog中出现的内部xid，在crash recover时，由binlog负责提交。(这是因为，binlog不进行prepare，只进行commit，因此在binlog中出现的内部xid，一定能够保证其在底层各存储引擎中已经完成prepare)。binlog插件与InnoDB存储引擎的日志数据需要是一致，从而保证主从环境数据的一致性。 在事务提交时，先写二进制日志，再写InnoDB存储引擎的重做日志。上述两个操作要求是原子操作，即二进制日志和重做日志必须同时写入。若二进制日志先写了，而在写入InnoDB引擎时发生了宕机，那么slave可能会接收到master传过去的二进制日志并执行，最终导致了主从不一致的情况。如下图所示:如果执行完1、2后在步骤3之前mysql数据库发生了宕机，则会发生主从不一致的情况。为解决这个问题，Mysql在binlog与innodb存储引擎之间采用xa事务。当事务提交时，innodb存储引擎会先做一个prepare操作，将事务的xid写入，接着进行二进制日志的写入，如右图所示，如果在innodb存储引擎提交前，mysql数据库宕机了，那么mysql数据库在重启后会先检查准备的uxid事务是否已经提交，若没有提交，则在存储引擎层再进行一次提交操作。<br><img src="/mysql分布式事务/mysql1.svg" alt="mysql1">   <img src="/mysql分布式事务/mysql2.svg" alt="mysql2"><br>另外，在使用分布式事务时，InnoDB存储引擎的事务隔离级别必须设置为SERIALIZABLE。<br><img src="/mysql分布式事务/mysql3.png" alt="mysql3"></p><p>分布式事务通过2PC协议将提交分成两个阶段</p><p>   分布式事务通常采用2PC协议，全称Two Phase Commitment Protocol。该协议主要为了解决在分布式数据库场景下，所有节点间数据一致性的问题。在分布式事务环境下，事务的提交会变得相对比较复杂，因为多个节点的存在，可能存在部分节点提交失败的情况，即事务的ACID特性需要在各个数据库实例中保证。总而言之，在分布式提交时，只要发生一个节点提交失败，则所有的节点都不能提交，只有当所有节点都能提交时，整个分布式事务才允许被提交。<br>1、prepare；<br>2、commit/rollback<br>    第一阶段的prepare只是用来询问每个节点事务是否能提交，只有当得到所有节点的“许可”的情况下，第二阶段的commit才能进行，否则就rollback。需要注意的是:prepare成功的事务，则必须全部提交。<br><img src="/mysql分布式事务/mysql4.png" alt="mysql4"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mysql的XA事务分为外部XA和内部XA&lt;br&gt;   外部XA用于跨多MySQL实例的分布式事务，外部XA事务是通常定义的分布式事务。MySQL数据库本身提供XA事务支持，例如常见的InnoDB存储引擎。因此，用户可以通过JTA实现分布式事务应用。在MySQL XA事务中
      
    
    </summary>
    
    
      <category term="mysql" scheme="www.shezzer.cn/tags/mysql/"/>
    
  </entry>
  
</feed>
