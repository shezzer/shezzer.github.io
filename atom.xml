<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Be Better</title>
  
  <subtitle>myBlog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.shezzer.cn/"/>
  <updated>2018-09-18T13:18:59.000Z</updated>
  <id>www.shezzer.cn/</id>
  
  <author>
    <name>Shezzer He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql索引及优化</title>
    <link href="www.shezzer.cn/2018/09/18/mysql%E7%B4%A2%E5%BC%95%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>www.shezzer.cn/2018/09/18/mysql索引及优化/</id>
    <published>2018-09-18T13:14:42.000Z</published>
    <updated>2018-09-18T13:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>聚簇索引:表记录的物理理存储顺序与索引顺序⼀一致，且索引的叶⼦子节点就是数据节点<br>非聚簇索引:表记录的物理理存储顺序与索引顺序⽆无关，叶节点包含索引键值以及指向对应数据块的指针(因存储引擎⽽而异)</p><img src="/2018/09/18/mysql索引及优化/聚簇索引和非聚簇索引.png" title="聚簇索引和非聚簇索引"><p>聚簇索引：</p><p>1、提升io密集型应用性能</p><p>2、Row的移动不影响二级索引</p><p>3、Innodb二级索引相对较大</p><p>4、Innodb二级索引需要检索两次B+树</p><p>5、如果主键值随机，在插⼊入记录或更更新主键时，可能造成记录移动或⻚页分裂，影响性能</p><p>非聚簇索引</p><p>1、索引与数据分离，索引所占空间小</p><p>2、Row的移动影响索引</p><p>3、随机io</p><p>建议建立索引的列</p><p><strong>WHERE, JOIN , GROUP BY, ORDER BY</strong> 等语句使用的列</p><p>利利⽤用最左前缀<br>(A,B,C): A, AB, AC,ABC,B,C,BC</p><p>如何选择索引列的顺序</p><p>\1. 经常被使⽤用到的列优先</p><p>✓ 利用最左前缀，尽量复用已有索引</p><p>\2. 区分度⼤的列优先<br>​    ✓ 区分度 = distinct(col) / count(col) ， distinct(col) 即cardinality，至少大于0.1</p><p>✓ 尽快排除掉更多的记录</p><p>\3. 宽度小的列优先<br>​    ✓ 列宽度 = 列的数据类型</p><p>✓ 宽度越小，单节点的key值越多，索引树的高度越低，查询复杂度越低</p><p>如何优化索引</p><p> type:连接的类型（type越靠前越好）<br>​    1、 const，system：最多一个匹配行，使用主键或者unique索引</p><p>​    2、eq_ref：返回一行数据，通常在联接时出现，使用主键或者unique索引</p><p>​    3、ref：使用key的最左前缀，且key不是主键或unique键</p><p>​    4、range：索引范围扫描，对索引的扫描开始于某一点，返回匹配的行</p><p>​    5、index：以索引的顺序进行全表扫描，优点是不用排序，缺点是还要全表扫描</p><p>​    6、all：全表扫描，必须避免</p><p>extra：（后面两种情况不允许出现）</p><p>​    1、using index : 索引覆盖，只用到索引，可以避免访问表</p><p>​    2、using where: 在存储引擎返回记录后再做过滤</p><p>​    3、using temporary:使用临时表，通常在使用group by和order by时出现</p><p>​    4、using filesort： 用到非索引排序的额外排序，当order by未用到索引时发生</p><p>explain分析：</p><p>key（优化其决定采用哪个索引来优化对该表的访问）不能为null</p><p>rows（mysql估算为了找到所需行而要检索的行数，作为优化器选择key的参考）越小越好</p><p>key_len（使用索引左前缀的长度（bytes），亦可理解为使用了索引中哪些字段）不影响索引精度的情况下，越小越好</p><p>*    定长字段: int占4个字节、date占3个字节、timestamp占4个字节，</p><p>char(n) 需要 [n <em> 编码字符所占字节]，如utf8编码，则长度为 n </em> 3 个字节</p><p>ALLOW NULL的字段:需要加1个字节来标记是否为NULL</p><p>变长字段varchar(n):需要 [n * 编码字符所占字节数 + 2 ]个字节，额外的2字节用于记录长度</p><p>索引优化思路：</p><img src="/2018/09/18/mysql索引及优化/索引优化.svg" title="索引优化思路">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;聚簇索引:表记录的物理理存储顺序与索引顺序⼀一致，且索引的叶⼦子节点就是数据节点&lt;br&gt;非聚簇索引:表记录的物理理存储顺序与索引顺序⽆无关，叶节点包含索引键值以及指向对应数据块的指针(因存储引擎⽽而异)&lt;/p&gt;
&lt;img src=&quot;/2018/09/18/mysql索引及优
      
    
    </summary>
    
    
      <category term="mysql" scheme="www.shezzer.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql分布式事务</title>
    <link href="www.shezzer.cn/2018/09/13/mysql%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>www.shezzer.cn/2018/09/13/mysql分布式事务/</id>
    <published>2018-09-13T13:45:19.000Z</published>
    <updated>2018-09-15T15:49:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql的XA事务分为外部XA和内部XA<br>   外部XA用于跨多MySQL实例的分布式事务，外部XA事务是通常定义的分布式事务。MySQL数据库本身提供XA事务支持，例如常见的InnoDB存储引擎。因此，用户可以通过JTA实现分布式事务应用。在MySQL XA事务中，应用程序是协调者（coordinator），参数事务的服务器节点就是资源管理器（resource manager）  应用层负责决定提交还是回滚，崩溃时的悬挂事务。MySQL数据库外部XA可以用在分布式数据库代理层，实现对MySQL数据库的分布式事务支持，例如开源的代理工具:网易的DDB，淘宝的TDDL等等。<br>   内部XA事务用于同一实例下跨多引擎事务，由Binlog作为协调者，比如在一个存储引擎提交时，需要将提交信息写入二进制日志，这就是一个分布式内部XA事务，只不过二进制日志的参与者是MySQL本身。Binlog作为内部XA的协调者，在binlog中出现的内部xid，在crash recover时，由binlog负责提交。(这是因为，binlog不进行prepare，只进行commit，因此在binlog中出现的内部xid，一定能够保证其在底层各存储引擎中已经完成prepare)。binlog插件与InnoDB存储引擎的日志数据需要是一致，从而保证主从环境数据的一致性。 在事务提交时，先写二进制日志，再写InnoDB存储引擎的重做日志。上述两个操作要求是原子操作，即二进制日志和重做日志必须同时写入。若二进制日志先写了，而在写入InnoDB引擎时发生了宕机，那么slave可能会接收到master传过去的二进制日志并执行，最终导致了主从不一致的情况。如下图1所示:如果执行完1、2后在步骤3之前mysql数据库发生了宕机，则会发生主从不一致的情况。为解决这个问题，Mysql在binlog与innodb存储引擎之间采用xa事务。当事务提交时，innodb存储引擎会先做一个prepare操作，将事务的xid写入，接着进行二进制日志的写入，如图2所示，如果在innodb存储引擎提交前，mysql数据库宕机了，那么mysql数据库在重启后会先检查准备的uxid事务是否已经提交，若没有提交，则在存储引擎层再进行一次提交操作。</p><img src="/2018/09/13/mysql分布式事务/mysql1.svg" title="图1"><img src="/2018/09/13/mysql分布式事务/mysql2.svg" title="图2"><p>另外，在使用分布式事务时，InnoDB存储引擎的事务隔离级别必须设置为SERIALIZABLE。<br><img src="/2018/09/13/mysql分布式事务/mysql3.png" title="两阶段提交"></p><p>分布式事务通过2PC协议将提交分成两个阶段</p><p>   分布式事务通常采用2PC协议，全称Two Phase Commitment Protocol。该协议主要为了解决在分布式数据库场景下，所有节点间数据一致性的问题。在分布式事务环境下，事务的提交会变得相对比较复杂，因为多个节点的存在，可能存在部分节点提交失败的情况，即事务的ACID特性需要在各个数据库实例中保证。总而言之，在分布式提交时，只要发生一个节点提交失败，则所有的节点都不能提交，只有当所有节点都能提交时，整个分布式事务才允许被提交。<br>1、prepare；<br>2、commit/rollback<br>​    第一阶段的prepare只是用来询问每个节点事务是否能提交，只有当得到所有节点的“许可”的情况下，第二阶段的commit才能进行，否则就rollback。需要注意的是:prepare成功的事务，则必须全部提交。<br><img src="/2018/09/13/mysql分布式事务/mysql4.png" title="2pc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mysql的XA事务分为外部XA和内部XA&lt;br&gt;   外部XA用于跨多MySQL实例的分布式事务，外部XA事务是通常定义的分布式事务。MySQL数据库本身提供XA事务支持，例如常见的InnoDB存储引擎。因此，用户可以通过JTA实现分布式事务应用。在MySQL XA事务中
      
    
    </summary>
    
    
      <category term="mysql" scheme="www.shezzer.cn/tags/mysql/"/>
    
  </entry>
  
</feed>
